
firmware_ext.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000bfe  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e6  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003b1  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000ac  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f4  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000981  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000247d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	51 d0       	rcall	.+162    	; 0xd6 <main>
  34:	d7 c2       	rjmp	.+1454   	; 0x5e4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
  38:	dc 01       	movw	r26, r24
  3a:	cb 01       	movw	r24, r22
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	aa 1f       	adc	r26, r26
  42:	bb 1f       	adc	r27, r27
  44:	88 0f       	add	r24, r24
  46:	99 1f       	adc	r25, r25
  48:	aa 1f       	adc	r26, r26
  4a:	bb 1f       	adc	r27, r27
  4c:	9c 01       	movw	r18, r24
  4e:	ad 01       	movw	r20, r26
  50:	22 0f       	add	r18, r18
  52:	33 1f       	adc	r19, r19
  54:	44 1f       	adc	r20, r20
  56:	55 1f       	adc	r21, r21
  58:	22 0f       	add	r18, r18
  5a:	33 1f       	adc	r19, r19
  5c:	44 1f       	adc	r20, r20
  5e:	55 1f       	adc	r21, r21
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	72 e1       	ldi	r23, 0x12	; 18
  64:	8a e7       	ldi	r24, 0x7A	; 122
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	9b d2       	rcall	.+1334   	; 0x5a0 <__udivmodsi4>
  6a:	ca 01       	movw	r24, r20
  6c:	b9 01       	movw	r22, r18
  6e:	61 50       	subi	r22, 0x01	; 1
  70:	71 09       	sbc	r23, r1
  72:	81 09       	sbc	r24, r1
  74:	91 09       	sbc	r25, r1
  76:	f4 d1       	rcall	.+1000   	; 0x460 <__floatunsisf>
  78:	30 d2       	rcall	.+1120   	; 0x4da <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
  7a:	27 2f       	mov	r18, r23
  7c:	33 27       	eor	r19, r19
  7e:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
  80:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
  8a:	08 95       	ret

0000008c <usart_putchar>:
}

void usart_putchar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
  8c:	5d 9b       	sbis	0x0b, 5	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <usart_putchar>
	// Start transmission
	UDR = data;
  90:	8c b9       	out	0x0c, r24	; 12
  92:	08 95       	ret

00000094 <usart_getchar>:
}

char usart_getchar(void)
{
	// Wait for incoming data
	while ( !(UCSRA & (_BV(RXC))) );
  94:	5f 9b       	sbis	0x0b, 7	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <usart_getchar>
	// Return the data
	return UDR;
  98:	8c b1       	in	r24, 0x0c	; 12
}
  9a:	08 95       	ret

0000009c <usart_dthit>:
}
//function to send a string through tx pin
unsigned char usart_dthit(void) {
	unsigned char b;
	b=0;
	if(UCSRA & (1<<RXC)) b=1;
  9c:	8b b1       	in	r24, 0x0b	; 11
	return b;
}
  9e:	88 1f       	adc	r24, r24
  a0:	88 27       	eor	r24, r24
  a2:	88 1f       	adc	r24, r24
  a4:	08 95       	ret

000000a6 <data_port>:
#include <util/delay.h>
#include "myusart.h"

void data_port(unsigned char data_buffer)
{
	if (data_buffer == 97)
  a6:	81 36       	cpi	r24, 0x61	; 97
  a8:	11 f4       	brne	.+4      	; 0xae <data_port+0x8>
	{
		PORTD |= (1<<PD5);
  aa:	95 9a       	sbi	0x12, 5	; 18
  ac:	08 95       	ret
	}
	else if (data_buffer == 98)
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	11 f4       	brne	.+4      	; 0xb6 <data_port+0x10>
	{
		PORTD &= ~(1<<PD5);
  b2:	95 98       	cbi	0x12, 5	; 18
  b4:	08 95       	ret
	}
	else if (data_buffer == 99)
  b6:	83 36       	cpi	r24, 0x63	; 99
  b8:	11 f4       	brne	.+4      	; 0xbe <data_port+0x18>
	{
		PORTD |= (1<<PD6);
  ba:	96 9a       	sbi	0x12, 6	; 18
  bc:	08 95       	ret
	}
	else if (data_buffer == 100)
  be:	84 36       	cpi	r24, 0x64	; 100
  c0:	11 f4       	brne	.+4      	; 0xc6 <data_port+0x20>
	{
		PORTD &= ~(1<<PD6);
  c2:	96 98       	cbi	0x12, 6	; 18
  c4:	08 95       	ret
	}
	else if (data_buffer == 101)
  c6:	85 36       	cpi	r24, 0x65	; 101
  c8:	11 f4       	brne	.+4      	; 0xce <data_port+0x28>
	{
		PORTD |= (1<<PD7);
  ca:	97 9a       	sbi	0x12, 7	; 18
  cc:	08 95       	ret
	}
	else if (data_buffer == 102)
  ce:	86 36       	cpi	r24, 0x66	; 102
  d0:	09 f4       	brne	.+2      	; 0xd4 <data_port+0x2e>
	{
		PORTD &= ~(1<<PD7);
  d2:	97 98       	cbi	0x12, 7	; 18
  d4:	08 95       	ret

000000d6 <main>:
	}
}

int main(void)
{
	PORTB = 0x0F;
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	88 bb       	out	0x18, r24	; 24
	DDRB = 0xF0;
  da:	80 ef       	ldi	r24, 0xF0	; 240
  dc:	87 bb       	out	0x17, r24	; 23
	
	PORTD = 0x00;
  de:	12 ba       	out	0x12, r1	; 18
	DDRD = (1<<PD5)|(1<<PD6)|(1<<PD7);
  e0:	80 ee       	ldi	r24, 0xE0	; 224
  e2:	81 bb       	out	0x11, r24	; 17
	
	usart_init(600);
  e4:	68 e5       	ldi	r22, 0x58	; 88
  e6:	72 e0       	ldi	r23, 0x02	; 2
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a5 df       	rcall	.-182    	; 0x38 <usart_init>
	
	wdt_enable(WDTO_2S);
  ee:	2f e0       	ldi	r18, 0x0F	; 15
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	a8 95       	wdr
  fa:	81 bd       	out	0x21, r24	; 33
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	21 bd       	out	0x21, r18	; 33
		if (usart_dthit())  // first check for usart data and do the operation
		{
			data_port(usart_getchar());
		}
        
        PORTB = 0xEF;    //start first column
 100:	0f ee       	ldi	r16, 0xEF	; 239
			_delay_ms(100);
        }


        
        PORTB = 0xDF;    //start second column
 102:	1f ed       	ldi	r17, 0xDF	; 223
		if (usart_dthit())  //second check for usart data and do the operation
		{
			data_port(usart_getchar());
		}

        PORTB = 0xBF;   //start third column
 104:	df eb       	ldi	r29, 0xBF	; 191
			_delay_ms(100);
        }
		
		
        
        PORTB = 0x7F;   //start fourth column
 106:	cf e7       	ldi	r28, 0x7F	; 127
	
	wdt_enable(WDTO_2S);
	
    while(1)
    {
		wdt_reset();
 108:	a8 95       	wdr
		
		if (usart_dthit())  // first check for usart data and do the operation
 10a:	c8 df       	rcall	.-112    	; 0x9c <usart_dthit>
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <main+0x3e>
		{
			data_port(usart_getchar());
 110:	c1 df       	rcall	.-126    	; 0x94 <usart_getchar>
 112:	c9 df       	rcall	.-110    	; 0xa6 <data_port>
		}
        
        PORTB = 0xEF;    //start first column
 114:	08 bb       	out	0x18, r16	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	22 e0       	ldi	r18, 0x02	; 2
 118:	2a 95       	dec	r18
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x42>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x48>
        _delay_us(1);
        if (!(PINB & 0x01))
 11e:	b0 99       	sbic	0x16, 0	; 22
 120:	17 c0       	rjmp	.+46     	; 0x150 <main+0x7a>
        {
			usart_putchar(1);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	b3 df       	rcall	.-154    	; 0x8c <usart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	9a e1       	ldi	r25, 0x1A	; 26
 12a:	26 e0       	ldi	r18, 0x06	; 6
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x56>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x60>
 136:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x01));
 138:	b0 9b       	sbis	0x16, 0	; 22
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0x62>
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	90 e7       	ldi	r25, 0x70	; 112
 140:	22 e0       	ldi	r18, 0x02	; 2
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x6c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x76>
 14c:	00 00       	nop
 14e:	4a c0       	rjmp	.+148    	; 0x1e4 <main+0x10e>
			_delay_ms(100);
        }
        else if (!(PINB & 0x02))
 150:	b1 99       	sbic	0x16, 1	; 22
 152:	17 c0       	rjmp	.+46     	; 0x182 <main+0xac>
        {
			usart_putchar(4);
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	9a df       	rcall	.-204    	; 0x8c <usart_putchar>
 158:	8f e7       	ldi	r24, 0x7F	; 127
 15a:	9a e1       	ldi	r25, 0x1A	; 26
 15c:	26 e0       	ldi	r18, 0x06	; 6
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x88>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x92>
 168:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x02));
 16a:	b1 9b       	sbis	0x16, 1	; 22
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x94>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	90 e7       	ldi	r25, 0x70	; 112
 172:	22 e0       	ldi	r18, 0x02	; 2
 174:	81 50       	subi	r24, 0x01	; 1
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	20 40       	sbci	r18, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x9e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xa8>
 17e:	00 00       	nop
 180:	31 c0       	rjmp	.+98     	; 0x1e4 <main+0x10e>
			_delay_ms(100);
        }
        else if (!(PINB & 0x04))
 182:	b2 99       	sbic	0x16, 2	; 22
 184:	17 c0       	rjmp	.+46     	; 0x1b4 <main+0xde>
        {
			usart_putchar(7);
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	81 df       	rcall	.-254    	; 0x8c <usart_putchar>
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	9a e1       	ldi	r25, 0x1A	; 26
 18e:	26 e0       	ldi	r18, 0x06	; 6
 190:	81 50       	subi	r24, 0x01	; 1
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	20 40       	sbci	r18, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xba>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xc4>
 19a:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x04));
 19c:	b2 9b       	sbis	0x16, 2	; 22
 19e:	fe cf       	rjmp	.-4      	; 0x19c <main+0xc6>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	90 e7       	ldi	r25, 0x70	; 112
 1a4:	22 e0       	ldi	r18, 0x02	; 2
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xd0>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xda>
 1b0:	00 00       	nop
 1b2:	18 c0       	rjmp	.+48     	; 0x1e4 <main+0x10e>
			_delay_ms(100);
        }
        else if (!(PINB & 0x08))
 1b4:	b3 99       	sbic	0x16, 3	; 22
 1b6:	16 c0       	rjmp	.+44     	; 0x1e4 <main+0x10e>
        {
			usart_putchar(11);
 1b8:	8b e0       	ldi	r24, 0x0B	; 11
 1ba:	68 df       	rcall	.-304    	; 0x8c <usart_putchar>
 1bc:	8f e7       	ldi	r24, 0x7F	; 127
 1be:	9a e1       	ldi	r25, 0x1A	; 26
 1c0:	26 e0       	ldi	r18, 0x06	; 6
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0xec>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0xf6>
 1cc:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x08));
 1ce:	b3 9b       	sbis	0x16, 3	; 22
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <main+0xf8>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	90 e7       	ldi	r25, 0x70	; 112
 1d6:	22 e0       	ldi	r18, 0x02	; 2
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x102>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x10c>
 1e2:	00 00       	nop
			_delay_ms(100);
        }


        
        PORTB = 0xDF;    //start second column
 1e4:	18 bb       	out	0x18, r17	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x112>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x118>
        _delay_us(1);
        if (!(PINB & 0x01))
 1ee:	b0 99       	sbic	0x16, 0	; 22
 1f0:	17 c0       	rjmp	.+46     	; 0x220 <main+0x14a>
        {
			usart_putchar(2);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	4b df       	rcall	.-362    	; 0x8c <usart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	9f e7       	ldi	r25, 0x7F	; 127
 1f8:	2a e1       	ldi	r18, 0x1A	; 26
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	91 50       	subi	r25, 0x01	; 1
 1fe:	20 40       	sbci	r18, 0x00	; 0
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x126>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x130>
 206:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x01));
 208:	b0 9b       	sbis	0x16, 0	; 22
 20a:	fe cf       	rjmp	.-4      	; 0x208 <main+0x132>
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	20 e7       	ldi	r18, 0x70	; 112
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	91 50       	subi	r25, 0x01	; 1
 214:	20 40       	sbci	r18, 0x00	; 0
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x13c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x146>
 21c:	00 00       	nop
 21e:	4a c0       	rjmp	.+148    	; 0x2b4 <main+0x1de>
			_delay_ms(100);
        }
        else if (!(PINB & 0x02))
 220:	b1 99       	sbic	0x16, 1	; 22
 222:	17 c0       	rjmp	.+46     	; 0x252 <main+0x17c>
        {
			usart_putchar(5);
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	32 df       	rcall	.-412    	; 0x8c <usart_putchar>
 228:	9f e7       	ldi	r25, 0x7F	; 127
 22a:	2a e1       	ldi	r18, 0x1A	; 26
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	20 40       	sbci	r18, 0x00	; 0
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x158>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x162>
 238:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x02));
 23a:	b1 9b       	sbis	0x16, 1	; 22
 23c:	fe cf       	rjmp	.-4      	; 0x23a <main+0x164>
 23e:	9f ef       	ldi	r25, 0xFF	; 255
 240:	20 e7       	ldi	r18, 0x70	; 112
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	91 50       	subi	r25, 0x01	; 1
 246:	20 40       	sbci	r18, 0x00	; 0
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x16e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x178>
 24e:	00 00       	nop
 250:	31 c0       	rjmp	.+98     	; 0x2b4 <main+0x1de>
			_delay_ms(100);
        }

        else if (!(PINB & 0x04))
 252:	b2 99       	sbic	0x16, 2	; 22
 254:	17 c0       	rjmp	.+46     	; 0x284 <main+0x1ae>
        {
			usart_putchar(8);
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	19 df       	rcall	.-462    	; 0x8c <usart_putchar>
 25a:	9f e7       	ldi	r25, 0x7F	; 127
 25c:	2a e1       	ldi	r18, 0x1A	; 26
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	91 50       	subi	r25, 0x01	; 1
 262:	20 40       	sbci	r18, 0x00	; 0
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x18a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x194>
 26a:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x04));
 26c:	b2 9b       	sbis	0x16, 2	; 22
 26e:	fe cf       	rjmp	.-4      	; 0x26c <main+0x196>
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	20 e7       	ldi	r18, 0x70	; 112
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	91 50       	subi	r25, 0x01	; 1
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x1a0>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x1aa>
 280:	00 00       	nop
 282:	18 c0       	rjmp	.+48     	; 0x2b4 <main+0x1de>
			_delay_ms(100);
        }

        else if (!(PINB & 0x08))
 284:	b3 99       	sbic	0x16, 3	; 22
 286:	16 c0       	rjmp	.+44     	; 0x2b4 <main+0x1de>
        {
			usart_putchar(10);
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	00 df       	rcall	.-512    	; 0x8c <usart_putchar>
 28c:	9f e7       	ldi	r25, 0x7F	; 127
 28e:	2a e1       	ldi	r18, 0x1A	; 26
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	91 50       	subi	r25, 0x01	; 1
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x1bc>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x1c6>
 29c:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x08));
 29e:	b3 9b       	sbis	0x16, 3	; 22
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <main+0x1c8>
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	20 e7       	ldi	r18, 0x70	; 112
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	91 50       	subi	r25, 0x01	; 1
 2aa:	20 40       	sbci	r18, 0x00	; 0
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x1d2>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x1dc>
 2b2:	00 00       	nop
			_delay_ms(100);
        }

		if (usart_dthit())  //second check for usart data and do the operation
 2b4:	f3 de       	rcall	.-538    	; 0x9c <usart_dthit>
 2b6:	88 23       	and	r24, r24
 2b8:	11 f0       	breq	.+4      	; 0x2be <main+0x1e8>
		{
			data_port(usart_getchar());
 2ba:	ec de       	rcall	.-552    	; 0x94 <usart_getchar>
 2bc:	f4 de       	rcall	.-536    	; 0xa6 <data_port>
		}

        PORTB = 0xBF;   //start third column
 2be:	d8 bb       	out	0x18, r29	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	9a 95       	dec	r25
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x1ec>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x1f2>
        _delay_us(1);
        if (!(PINB & 0x01))
 2c8:	b0 99       	sbic	0x16, 0	; 22
 2ca:	17 c0       	rjmp	.+46     	; 0x2fa <main+0x224>
        {
			usart_putchar(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	de de       	rcall	.-580    	; 0x8c <usart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f e7       	ldi	r18, 0x7F	; 127
 2d2:	8a e1       	ldi	r24, 0x1A	; 26
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x200>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x20a>
 2e0:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x01));
 2e2:	b0 9b       	sbis	0x16, 0	; 22
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <main+0x20c>
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	80 e7       	ldi	r24, 0x70	; 112
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x216>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x220>
 2f6:	00 00       	nop
 2f8:	4a c0       	rjmp	.+148    	; 0x38e <main+0x2b8>
			_delay_ms(100);
        }
        else if (!(PINB & 0x02))
 2fa:	b1 99       	sbic	0x16, 1	; 22
 2fc:	17 c0       	rjmp	.+46     	; 0x32c <main+0x256>
        {
			usart_putchar(6);
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	c5 de       	rcall	.-630    	; 0x8c <usart_putchar>
 302:	2f e7       	ldi	r18, 0x7F	; 127
 304:	8a e1       	ldi	r24, 0x1A	; 26
 306:	96 e0       	ldi	r25, 0x06	; 6
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x232>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x23c>
 312:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x02));
 314:	b1 9b       	sbis	0x16, 1	; 22
 316:	fe cf       	rjmp	.-4      	; 0x314 <main+0x23e>
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	80 e7       	ldi	r24, 0x70	; 112
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x248>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x252>
 328:	00 00       	nop
 32a:	31 c0       	rjmp	.+98     	; 0x38e <main+0x2b8>
			_delay_ms(100);
        }
        else if (!(PINB & 0x04))
 32c:	b2 99       	sbic	0x16, 2	; 22
 32e:	17 c0       	rjmp	.+46     	; 0x35e <main+0x288>
        {
			usart_putchar(9);
 330:	89 e0       	ldi	r24, 0x09	; 9
 332:	ac de       	rcall	.-680    	; 0x8c <usart_putchar>
 334:	2f e7       	ldi	r18, 0x7F	; 127
 336:	8a e1       	ldi	r24, 0x1A	; 26
 338:	96 e0       	ldi	r25, 0x06	; 6
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x264>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x26e>
 344:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x04));
 346:	b2 9b       	sbis	0x16, 2	; 22
 348:	fe cf       	rjmp	.-4      	; 0x346 <main+0x270>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	80 e7       	ldi	r24, 0x70	; 112
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x27a>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x284>
 35a:	00 00       	nop
 35c:	18 c0       	rjmp	.+48     	; 0x38e <main+0x2b8>
			_delay_ms(100);
        }
        else if (!(PINB & 0x08))
 35e:	b3 99       	sbic	0x16, 3	; 22
 360:	16 c0       	rjmp	.+44     	; 0x38e <main+0x2b8>
        {
			usart_putchar(12);
 362:	8c e0       	ldi	r24, 0x0C	; 12
 364:	93 de       	rcall	.-730    	; 0x8c <usart_putchar>
 366:	2f e7       	ldi	r18, 0x7F	; 127
 368:	8a e1       	ldi	r24, 0x1A	; 26
 36a:	96 e0       	ldi	r25, 0x06	; 6
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x296>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x2a0>
 376:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x08));
 378:	b3 9b       	sbis	0x16, 3	; 22
 37a:	fe cf       	rjmp	.-4      	; 0x378 <main+0x2a2>
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	80 e7       	ldi	r24, 0x70	; 112
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x2ac>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x2b6>
 38c:	00 00       	nop
			_delay_ms(100);
        }
		
		
        
        PORTB = 0x7F;   //start fourth column
 38e:	c8 bb       	out	0x18, r28	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	22 e0       	ldi	r18, 0x02	; 2
 392:	2a 95       	dec	r18
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x2bc>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x2c2>
        _delay_us(1);
        if (!(PINB & 0x01))
 398:	b0 99       	sbic	0x16, 0	; 22
 39a:	17 c0       	rjmp	.+46     	; 0x3ca <main+0x2f4>
        {
			usart_putchar(13);
 39c:	8d e0       	ldi	r24, 0x0D	; 13
 39e:	76 de       	rcall	.-788    	; 0x8c <usart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	8f e7       	ldi	r24, 0x7F	; 127
 3a2:	9a e1       	ldi	r25, 0x1A	; 26
 3a4:	26 e0       	ldi	r18, 0x06	; 6
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	20 40       	sbci	r18, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x2d0>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x2da>
 3b0:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x01));
 3b2:	b0 9b       	sbis	0x16, 0	; 22
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <main+0x2dc>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	90 e7       	ldi	r25, 0x70	; 112
 3ba:	22 e0       	ldi	r18, 0x02	; 2
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	20 40       	sbci	r18, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0x2e6>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x2f0>
 3c6:	00 00       	nop
 3c8:	9f ce       	rjmp	.-706    	; 0x108 <main+0x32>
			_delay_ms(100);
        }
        else if (!(PINB & 0x02))
 3ca:	b1 99       	sbic	0x16, 1	; 22
 3cc:	17 c0       	rjmp	.+46     	; 0x3fc <main+0x326>
        {
			usart_putchar(14);
 3ce:	8e e0       	ldi	r24, 0x0E	; 14
 3d0:	5d de       	rcall	.-838    	; 0x8c <usart_putchar>
 3d2:	8f e7       	ldi	r24, 0x7F	; 127
 3d4:	9a e1       	ldi	r25, 0x1A	; 26
 3d6:	26 e0       	ldi	r18, 0x06	; 6
 3d8:	81 50       	subi	r24, 0x01	; 1
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	20 40       	sbci	r18, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x302>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x30c>
 3e2:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x02));
 3e4:	b1 9b       	sbis	0x16, 1	; 22
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <main+0x30e>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	90 e7       	ldi	r25, 0x70	; 112
 3ec:	22 e0       	ldi	r18, 0x02	; 2
 3ee:	81 50       	subi	r24, 0x01	; 1
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	20 40       	sbci	r18, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <main+0x318>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x322>
 3f8:	00 00       	nop
 3fa:	86 ce       	rjmp	.-756    	; 0x108 <main+0x32>
			_delay_ms(100);
        }
        else if (!(PINB & 0x04))
 3fc:	b2 99       	sbic	0x16, 2	; 22
 3fe:	17 c0       	rjmp	.+46     	; 0x42e <main+0x358>
        {
			usart_putchar(15);
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	44 de       	rcall	.-888    	; 0x8c <usart_putchar>
 404:	8f e7       	ldi	r24, 0x7F	; 127
 406:	9a e1       	ldi	r25, 0x1A	; 26
 408:	26 e0       	ldi	r18, 0x06	; 6
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	20 40       	sbci	r18, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <main+0x334>
 412:	00 c0       	rjmp	.+0      	; 0x414 <main+0x33e>
 414:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x04));
 416:	b2 9b       	sbis	0x16, 2	; 22
 418:	fe cf       	rjmp	.-4      	; 0x416 <main+0x340>
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	90 e7       	ldi	r25, 0x70	; 112
 41e:	22 e0       	ldi	r18, 0x02	; 2
 420:	81 50       	subi	r24, 0x01	; 1
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	20 40       	sbci	r18, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <main+0x34a>
 428:	00 c0       	rjmp	.+0      	; 0x42a <main+0x354>
 42a:	00 00       	nop
 42c:	6d ce       	rjmp	.-806    	; 0x108 <main+0x32>
			_delay_ms(100);
        }
        else if (!(PINB & 0x08))
 42e:	b3 99       	sbic	0x16, 3	; 22
 430:	6b ce       	rjmp	.-810    	; 0x108 <main+0x32>
        {
			usart_putchar(16);
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	2b de       	rcall	.-938    	; 0x8c <usart_putchar>
 436:	8f e7       	ldi	r24, 0x7F	; 127
 438:	9a e1       	ldi	r25, 0x1A	; 26
 43a:	26 e0       	ldi	r18, 0x06	; 6
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	20 40       	sbci	r18, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <main+0x366>
 444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x370>
 446:	00 00       	nop
			_delay_ms(250);
	        while(!(PINB & 0x08));
 448:	b3 9b       	sbis	0x16, 3	; 22
 44a:	fe cf       	rjmp	.-4      	; 0x448 <main+0x372>
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	90 e7       	ldi	r25, 0x70	; 112
 450:	22 e0       	ldi	r18, 0x02	; 2
 452:	81 50       	subi	r24, 0x01	; 1
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	20 40       	sbci	r18, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <main+0x37c>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <main+0x386>
 45c:	00 00       	nop
 45e:	54 ce       	rjmp	.-856    	; 0x108 <main+0x32>

00000460 <__floatunsisf>:
 460:	e8 94       	clt
 462:	09 c0       	rjmp	.+18     	; 0x476 <__floatsisf+0x12>

00000464 <__floatsisf>:
 464:	97 fb       	bst	r25, 7
 466:	3e f4       	brtc	.+14     	; 0x476 <__floatsisf+0x12>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	99 23       	and	r25, r25
 478:	a9 f0       	breq	.+42     	; 0x4a4 <__floatsisf+0x40>
 47a:	f9 2f       	mov	r31, r25
 47c:	96 e9       	ldi	r25, 0x96	; 150
 47e:	bb 27       	eor	r27, r27
 480:	93 95       	inc	r25
 482:	f6 95       	lsr	r31
 484:	87 95       	ror	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b7 95       	ror	r27
 48c:	f1 11       	cpse	r31, r1
 48e:	f8 cf       	rjmp	.-16     	; 0x480 <__floatsisf+0x1c>
 490:	fa f4       	brpl	.+62     	; 0x4d0 <__floatsisf+0x6c>
 492:	bb 0f       	add	r27, r27
 494:	11 f4       	brne	.+4      	; 0x49a <__floatsisf+0x36>
 496:	60 ff       	sbrs	r22, 0
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <__floatsisf+0x6c>
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <__floatsisf+0x6c>
 4a4:	88 23       	and	r24, r24
 4a6:	11 f0       	breq	.+4      	; 0x4ac <__floatsisf+0x48>
 4a8:	96 e9       	ldi	r25, 0x96	; 150
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__floatsisf+0x6a>
 4ac:	77 23       	and	r23, r23
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__floatsisf+0x54>
 4b0:	9e e8       	ldi	r25, 0x8E	; 142
 4b2:	87 2f       	mov	r24, r23
 4b4:	76 2f       	mov	r23, r22
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <__floatsisf+0x5e>
 4b8:	66 23       	and	r22, r22
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <__floatsisf+0x74>
 4bc:	96 e8       	ldi	r25, 0x86	; 134
 4be:	86 2f       	mov	r24, r22
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	2a f0       	brmi	.+10     	; 0x4d0 <__floatsisf+0x6c>
 4c6:	9a 95       	dec	r25
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	da f7       	brpl	.-10     	; 0x4c6 <__floatsisf+0x62>
 4d0:	88 0f       	add	r24, r24
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <lrint>:
 4da:	41 d0       	rcall	.+130    	; 0x55e <__fp_splitA>
 4dc:	a8 f1       	brcs	.+106    	; 0x548 <lrint+0x6e>
 4de:	9e 57       	subi	r25, 0x7E	; 126
 4e0:	a8 f1       	brcs	.+106    	; 0x54c <lrint+0x72>
 4e2:	98 51       	subi	r25, 0x18	; 24
 4e4:	60 f0       	brcs	.+24     	; 0x4fe <lrint+0x24>
 4e6:	39 f1       	breq	.+78     	; 0x536 <lrint+0x5c>
 4e8:	98 30       	cpi	r25, 0x08	; 8
 4ea:	70 f5       	brcc	.+92     	; 0x548 <lrint+0x6e>
 4ec:	09 2e       	mov	r0, r25
 4ee:	99 27       	eor	r25, r25
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	d1 f7       	brne	.-12     	; 0x4f0 <lrint+0x16>
 4fc:	1c c0       	rjmp	.+56     	; 0x536 <lrint+0x5c>
 4fe:	bb 27       	eor	r27, r27
 500:	99 3f       	cpi	r25, 0xF9	; 249
 502:	4c f4       	brge	.+18     	; 0x516 <lrint+0x3c>
 504:	b1 11       	cpse	r27, r1
 506:	b1 e0       	ldi	r27, 0x01	; 1
 508:	b6 2b       	or	r27, r22
 50a:	67 2f       	mov	r22, r23
 50c:	78 2f       	mov	r23, r24
 50e:	88 27       	eor	r24, r24
 510:	98 5f       	subi	r25, 0xF8	; 248
 512:	b1 f7       	brne	.-20     	; 0x500 <lrint+0x26>
 514:	08 c0       	rjmp	.+16     	; 0x526 <lrint+0x4c>
 516:	86 95       	lsr	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	08 f4       	brcc	.+2      	; 0x522 <lrint+0x48>
 520:	b1 60       	ori	r27, 0x01	; 1
 522:	93 95       	inc	r25
 524:	c1 f7       	brne	.-16     	; 0x516 <lrint+0x3c>
 526:	bb 0f       	add	r27, r27
 528:	30 f4       	brcc	.+12     	; 0x536 <lrint+0x5c>
 52a:	11 f4       	brne	.+4      	; 0x530 <lrint+0x56>
 52c:	60 ff       	sbrs	r22, 0
 52e:	03 c0       	rjmp	.+6      	; 0x536 <lrint+0x5c>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	3e f4       	brtc	.+14     	; 0x546 <lrint+0x6c>
 538:	90 95       	com	r25
 53a:	80 95       	com	r24
 53c:	70 95       	com	r23
 53e:	61 95       	neg	r22
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	8f 4f       	sbci	r24, 0xFF	; 255
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret
 548:	68 94       	set
 54a:	24 c0       	rjmp	.+72     	; 0x594 <__fp_szero>
 54c:	22 c0       	rjmp	.+68     	; 0x592 <__fp_zero>

0000054e <__fp_split3>:
 54e:	57 fd       	sbrc	r21, 7
 550:	90 58       	subi	r25, 0x80	; 128
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	59 f0       	breq	.+22     	; 0x56e <__fp_splitA+0x10>
 558:	5f 3f       	cpi	r21, 0xFF	; 255
 55a:	71 f0       	breq	.+28     	; 0x578 <__fp_splitA+0x1a>
 55c:	47 95       	ror	r20

0000055e <__fp_splitA>:
 55e:	88 0f       	add	r24, r24
 560:	97 fb       	bst	r25, 7
 562:	99 1f       	adc	r25, r25
 564:	61 f0       	breq	.+24     	; 0x57e <__fp_splitA+0x20>
 566:	9f 3f       	cpi	r25, 0xFF	; 255
 568:	79 f0       	breq	.+30     	; 0x588 <__fp_splitA+0x2a>
 56a:	87 95       	ror	r24
 56c:	08 95       	ret
 56e:	12 16       	cp	r1, r18
 570:	13 06       	cpc	r1, r19
 572:	14 06       	cpc	r1, r20
 574:	55 1f       	adc	r21, r21
 576:	f2 cf       	rjmp	.-28     	; 0x55c <__fp_split3+0xe>
 578:	46 95       	lsr	r20
 57a:	f1 df       	rcall	.-30     	; 0x55e <__fp_splitA>
 57c:	08 c0       	rjmp	.+16     	; 0x58e <__fp_splitA+0x30>
 57e:	16 16       	cp	r1, r22
 580:	17 06       	cpc	r1, r23
 582:	18 06       	cpc	r1, r24
 584:	99 1f       	adc	r25, r25
 586:	f1 cf       	rjmp	.-30     	; 0x56a <__fp_splitA+0xc>
 588:	86 95       	lsr	r24
 58a:	71 05       	cpc	r23, r1
 58c:	61 05       	cpc	r22, r1
 58e:	08 94       	sec
 590:	08 95       	ret

00000592 <__fp_zero>:
 592:	e8 94       	clt

00000594 <__fp_szero>:
 594:	bb 27       	eor	r27, r27
 596:	66 27       	eor	r22, r22
 598:	77 27       	eor	r23, r23
 59a:	cb 01       	movw	r24, r22
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret

000005a0 <__udivmodsi4>:
 5a0:	a1 e2       	ldi	r26, 0x21	; 33
 5a2:	1a 2e       	mov	r1, r26
 5a4:	aa 1b       	sub	r26, r26
 5a6:	bb 1b       	sub	r27, r27
 5a8:	fd 01       	movw	r30, r26
 5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <__udivmodsi4_ep>

000005ac <__udivmodsi4_loop>:
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	ee 1f       	adc	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	a2 17       	cp	r26, r18
 5b6:	b3 07       	cpc	r27, r19
 5b8:	e4 07       	cpc	r30, r20
 5ba:	f5 07       	cpc	r31, r21
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__udivmodsi4_ep>
 5be:	a2 1b       	sub	r26, r18
 5c0:	b3 0b       	sbc	r27, r19
 5c2:	e4 0b       	sbc	r30, r20
 5c4:	f5 0b       	sbc	r31, r21

000005c6 <__udivmodsi4_ep>:
 5c6:	66 1f       	adc	r22, r22
 5c8:	77 1f       	adc	r23, r23
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	1a 94       	dec	r1
 5d0:	69 f7       	brne	.-38     	; 0x5ac <__udivmodsi4_loop>
 5d2:	60 95       	com	r22
 5d4:	70 95       	com	r23
 5d6:	80 95       	com	r24
 5d8:	90 95       	com	r25
 5da:	9b 01       	movw	r18, r22
 5dc:	ac 01       	movw	r20, r24
 5de:	bd 01       	movw	r22, r26
 5e0:	cf 01       	movw	r24, r30
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
