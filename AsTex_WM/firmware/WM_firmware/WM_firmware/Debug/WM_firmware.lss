
WM_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  000006bc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000453  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d3  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000210  00000000  00000000  00000d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000259  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000485  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2f 00 	jmp	0x5e	; 0x5e <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  10:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  14:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  18:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  1c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  20:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  24:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  28:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  2c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  30:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  38:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  3c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  40:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  44:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  48:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  50:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>

00000054 <SS_DATA>:
  54:	3f 06 5b 4f 66 6d 7d 27 7f 6f                       ?.[Ofm}'.o

0000005e <__ctors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d8 e0       	ldi	r29, 0x08	; 8
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_clear_bss>:
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	a0 e6       	ldi	r26, 0x60	; 96
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	a9 36       	cpi	r26, 0x69	; 105
  76:	b2 07       	cpc	r27, r18
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  7e:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

00000082 <__bad_interrupt>:
  82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000086 <Read_ADC>:
{
	ADCSRA=0x80 | AD_PRSCL;
}

float Read_ADC(unsigned char adc_input)
{
  86:	98 e2       	ldi	r25, 0x28	; 40
	char i;
	uint16_t temp=0;
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
	for (i=0;i<40;i++)  // make 25 sample and then average it
	{
		ADMUX = adc_input | ADC_VREF; //MUX setup page 215
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4d e0       	ldi	r20, 0x0D	; 13
  92:	4a 95       	dec	r20
  94:	f1 f7       	brne	.-4      	; 0x92 <Read_ADC+0xc>
  96:	00 00       	nop
		_delay_us(10);
		ADCSRA |= 0x40;
  98:	36 9a       	sbi	0x06, 6	; 6
		while ((ADCSRA & 0x10) == 0);
  9a:	34 9b       	sbis	0x06, 4	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <Read_ADC+0x14>
		ADCSRA |= (1<<4);
  9e:	34 9a       	sbi	0x06, 4	; 6
		temp = temp + ADCW;
  a0:	44 b1       	in	r20, 0x04	; 4
  a2:	55 b1       	in	r21, 0x05	; 5
  a4:	24 0f       	add	r18, r20
  a6:	35 1f       	adc	r19, r21
  a8:	91 50       	subi	r25, 0x01	; 1

float Read_ADC(unsigned char adc_input)
{
	char i;
	uint16_t temp=0;
	for (i=0;i<40;i++)  // make 25 sample and then average it
  aa:	89 f7       	brne	.-30     	; 0x8e <Read_ADC+0x8>
		ADCSRA |= 0x40;
		while ((ADCSRA & 0x10) == 0);
		ADCSRA |= (1<<4);
		temp = temp + ADCW;
	}
	return (temp/i);
  ac:	ad ec       	ldi	r26, 0xCD	; 205
  ae:	bc ec       	ldi	r27, 0xCC	; 204
  b0:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	92 95       	swap	r25
  ba:	82 95       	swap	r24
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	89 27       	eor	r24, r25
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	89 27       	eor	r24, r25
  c4:	bc 01       	movw	r22, r24
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 85 02 	call	0x50a	; 0x50a <__floatunsisf>
}
  ce:	08 95       	ret

000000d0 <set_data_ss>:
const uint8_t SS_DATA[10] PROGMEM={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x27,0x7F,0x6F};
uint8_t button_input=0;
uint16_t adc_value=0, adc_value_temp=0, adc_value_prev=0, check=0;

void set_data_ss(uint16_t val, uint8_t dimmer, uint8_t high_step, uint8_t adc_active, int dot_pnum)
{
  d0:	4f 92       	push	r4
  d2:	5f 92       	push	r5
  d4:	6f 92       	push	r6
  d6:	7f 92       	push	r7
  d8:	8f 92       	push	r8
  da:	9f 92       	push	r9
  dc:	af 92       	push	r10
  de:	bf 92       	push	r11
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	5c 01       	movw	r10, r24
  f2:	86 2e       	mov	r8, r22
  f4:	92 2e       	mov	r9, r18
		if (i==(dot_pnum-1)) p2 &= ~(1<<7); // make it zero for inverse output (CA display)
		PORTA = p1;
		PORTC = p2;
		if (dimmer)
		{
			if (!(select & (1<<(3+high_step))))
  f6:	4d 5f       	subi	r20, 0xFD	; 253
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2c 01       	movw	r4, r24
  fe:	02 c0       	rjmp	.+4      	; 0x104 <set_data_ss+0x34>
 100:	44 0c       	add	r4, r4
 102:	55 1c       	adc	r5, r5
 104:	4a 95       	dec	r20
 106:	e2 f7       	brpl	.-8      	; 0x100 <set_data_ss+0x30>

void set_data_ss(uint16_t val, uint8_t dimmer, uint8_t high_step, uint8_t adc_active, int dot_pnum)
{
	int i;
	uint8_t select = 0x10, p1=0, p2=0;
	float adc_buffer=0.0;
 108:	c1 2c       	mov	r12, r1
 10a:	d1 2c       	mov	r13, r1
 10c:	76 01       	movw	r14, r12
uint16_t adc_value=0, adc_value_temp=0, adc_value_prev=0, check=0;

void set_data_ss(uint16_t val, uint8_t dimmer, uint8_t high_step, uint8_t adc_active, int dot_pnum)
{
	int i;
	uint8_t select = 0x10, p1=0, p2=0;
 10e:	68 94       	set
 110:	77 24       	eor	r7, r7
 112:	74 f8       	bld	r7, 4
	float adc_buffer=0.0;
	for (i=0;i<4;i++)
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
	{
		p1 = (PORTA & 0x0F) | select;
		p2= ~pgm_read_byte(&SS_DATA[val%10]);
		if (i==(dot_pnum-1)) p2 &= ~(1<<7); // make it zero for inverse output (CA display)
 118:	01 50       	subi	r16, 0x01	; 1
 11a:	11 09       	sbc	r17, r1
	int i;
	uint8_t select = 0x10, p1=0, p2=0;
	float adc_buffer=0.0;
	for (i=0;i<4;i++)
	{
		p1 = (PORTA & 0x0F) | select;
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	67 2c       	mov	r6, r7
 122:	68 2a       	or	r6, r24
		p2= ~pgm_read_byte(&SS_DATA[val%10]);
 124:	95 01       	movw	r18, r10
 126:	ad ec       	ldi	r26, 0xCD	; 205
 128:	bc ec       	ldi	r27, 0xCC	; 204
 12a:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	ac 01       	movw	r20, r24
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	84 0f       	add	r24, r20
 14e:	95 1f       	adc	r25, r21
 150:	f5 01       	movw	r30, r10
 152:	e8 1b       	sub	r30, r24
 154:	f9 0b       	sbc	r31, r25
 156:	ec 5a       	subi	r30, 0xAC	; 172
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	e4 91       	lpm	r30, Z
 15c:	e0 95       	com	r30
		if (i==(dot_pnum-1)) p2 &= ~(1<<7); // make it zero for inverse output (CA display)
 15e:	0c 17       	cp	r16, r28
 160:	1d 07       	cpc	r17, r29
 162:	09 f4       	brne	.+2      	; 0x166 <set_data_ss+0x96>
 164:	ef 77       	andi	r30, 0x7F	; 127
		PORTA = p1;
 166:	6b ba       	out	0x1b, r6	; 27
		PORTC = p2;
 168:	e5 bb       	out	0x15, r30	; 21
		if (dimmer)
 16a:	88 20       	and	r8, r8
 16c:	69 f0       	breq	.+26     	; 0x188 <set_data_ss+0xb8>
		{
			if (!(select & (1<<(3+high_step))))
 16e:	87 2d       	mov	r24, r7
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	84 21       	and	r24, r4
 174:	95 21       	and	r25, r5
 176:	89 2b       	or	r24, r25
 178:	69 f4       	brne	.+26     	; 0x194 <set_data_ss+0xc4>
 17a:	88 ec       	ldi	r24, 0xC8	; 200
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <set_data_ss+0xac>
			{
				_delay_us(150);
				PORTA &= 0x0F;
 180:	8b b3       	in	r24, 0x1b	; 27
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	8b bb       	out	0x1b, r24	; 27
 186:	06 c0       	rjmp	.+12     	; 0x194 <set_data_ss+0xc4>
			}
		}
		else if (!val)
 188:	a1 14       	cp	r10, r1
 18a:	b1 04       	cpc	r11, r1
 18c:	19 f4       	brne	.+6      	; 0x194 <set_data_ss+0xc4>
		{
			PORTA &= 0x1F;
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8f 71       	andi	r24, 0x1F	; 31
 192:	8b bb       	out	0x1b, r24	; 27
		}
		select = select<<1;
 194:	77 0c       	add	r7, r7
		val=val/10;
 196:	95 01       	movw	r18, r10
 198:	ad ec       	ldi	r26, 0xCD	; 205
 19a:	bc ec       	ldi	r27, 0xCC	; 204
 19c:	0e 94 13 03 	call	0x626	; 0x626 <__umulhisi3>
 1a0:	5c 01       	movw	r10, r24
 1a2:	b6 94       	lsr	r11
 1a4:	a7 94       	ror	r10
 1a6:	b6 94       	lsr	r11
 1a8:	a7 94       	ror	r10
 1aa:	b6 94       	lsr	r11
 1ac:	a7 94       	ror	r10
		if (adc_active) 
 1ae:	99 20       	and	r9, r9
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <set_data_ss+0xe4>
 1b2:	59 c0       	rjmp	.+178    	; 0x266 <set_data_ss+0x196>
		{
			if (i==3)
 1b4:	c3 30       	cpi	r28, 0x03	; 3
 1b6:	d1 05       	cpc	r29, r1
 1b8:	09 f0       	breq	.+2      	; 0x1bc <set_data_ss+0xec>
 1ba:	49 c0       	rjmp	.+146    	; 0x24e <set_data_ss+0x17e>
			{
				adc_value_temp = (uint16_t)(adc_buffer/3.0);
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e4       	ldi	r20, 0x40	; 64
 1c2:	50 e4       	ldi	r21, 0x40	; 64
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3>
 1cc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fixunssfsi>
 1d0:	70 93 65 00 	sts	0x0065, r23
 1d4:	60 93 64 00 	sts	0x0064, r22
				if (adc_value_temp < adc_value-4 || adc_value_temp > adc_value+4)
 1d8:	40 91 66 00 	lds	r20, 0x0066
 1dc:	50 91 67 00 	lds	r21, 0x0067
 1e0:	fa 01       	movw	r30, r20
 1e2:	34 97       	sbiw	r30, 0x04	; 4
 1e4:	6e 17       	cp	r22, r30
 1e6:	7f 07       	cpc	r23, r31
 1e8:	28 f0       	brcs	.+10     	; 0x1f4 <set_data_ss+0x124>
 1ea:	4c 5f       	subi	r20, 0xFC	; 252
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	46 17       	cp	r20, r22
 1f0:	57 07       	cpc	r21, r23
 1f2:	28 f4       	brcc	.+10     	; 0x1fe <set_data_ss+0x12e>
				{
					adc_value = adc_value_temp;
 1f4:	70 93 67 00 	sts	0x0067, r23
 1f8:	60 93 66 00 	sts	0x0066, r22
 1fc:	21 c0       	rjmp	.+66     	; 0x240 <set_data_ss+0x170>
				}
				else
				{
					if (adc_value_prev==adc_value_temp)
 1fe:	40 91 62 00 	lds	r20, 0x0062
 202:	50 91 63 00 	lds	r21, 0x0063
 206:	64 17       	cp	r22, r20
 208:	75 07       	cpc	r23, r21
 20a:	91 f4       	brne	.+36     	; 0x230 <set_data_ss+0x160>
					{
						check=check+1;
 20c:	20 91 60 00 	lds	r18, 0x0060
 210:	30 91 61 00 	lds	r19, 0x0061
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	30 93 61 00 	sts	0x0061, r19
 21c:	20 93 60 00 	sts	0x0060, r18
						if (check>=30)
 220:	2e 31       	cpi	r18, 0x1E	; 30
 222:	31 05       	cpc	r19, r1
 224:	68 f0       	brcs	.+26     	; 0x240 <set_data_ss+0x170>
						{
							adc_value = adc_value_temp;
 226:	70 93 67 00 	sts	0x0067, r23
 22a:	60 93 66 00 	sts	0x0066, r22
 22e:	08 c0       	rjmp	.+16     	; 0x240 <set_data_ss+0x170>
						}
					}
					else
					{
						adc_value_prev=adc_value_temp;
 230:	70 93 63 00 	sts	0x0063, r23
 234:	60 93 62 00 	sts	0x0062, r22
						check = 0;
 238:	10 92 61 00 	sts	0x0061, r1
 23c:	10 92 60 00 	sts	0x0060, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	83 e9       	ldi	r24, 0x93	; 147
 242:	91 e1       	ldi	r25, 0x11	; 17
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <set_data_ss+0x174>
 248:	00 c0       	rjmp	.+0      	; 0x24a <set_data_ss+0x17a>
 24a:	00 00       	nop
 24c:	17 c0       	rjmp	.+46     	; 0x27c <set_data_ss+0x1ac>
				}
				_delay_ms(4.5);
			}
			else
			{
				adc_buffer = adc_buffer + Read_ADC(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 43 00 	call	0x86	; 0x86 <Read_ADC>
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	c7 01       	movw	r24, r14
 25a:	b6 01       	movw	r22, r12
 25c:	0e 94 8d 01 	call	0x31a	; 0x31a <__addsf3>
 260:	6b 01       	movw	r12, r22
 262:	7c 01       	movw	r14, r24
 264:	06 c0       	rjmp	.+12     	; 0x272 <set_data_ss+0x1a2>
 266:	8b e5       	ldi	r24, 0x5B	; 91
 268:	92 e1       	ldi	r25, 0x12	; 18
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <set_data_ss+0x19a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <set_data_ss+0x1a0>
 270:	00 00       	nop
void set_data_ss(uint16_t val, uint8_t dimmer, uint8_t high_step, uint8_t adc_active, int dot_pnum)
{
	int i;
	uint8_t select = 0x10, p1=0, p2=0;
	float adc_buffer=0.0;
	for (i=0;i<4;i++)
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	c4 30       	cpi	r28, 0x04	; 4
 276:	d1 05       	cpc	r29, r1
 278:	09 f0       	breq	.+2      	; 0x27c <set_data_ss+0x1ac>
 27a:	50 cf       	rjmp	.-352    	; 0x11c <set_data_ss+0x4c>
		else 
		{
			_delay_ms(4.7);
		}
	}
	if (!Button_1) button_input = 1;
 27c:	80 99       	sbic	0x10, 0	; 16
 27e:	04 c0       	rjmp	.+8      	; 0x288 <set_data_ss+0x1b8>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 68 00 	sts	0x0068, r24
 286:	14 c0       	rjmp	.+40     	; 0x2b0 <set_data_ss+0x1e0>
	else if (!Button_2) button_input = 2;
 288:	81 99       	sbic	0x10, 1	; 16
 28a:	04 c0       	rjmp	.+8      	; 0x294 <set_data_ss+0x1c4>
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	80 93 68 00 	sts	0x0068, r24
 292:	0e c0       	rjmp	.+28     	; 0x2b0 <set_data_ss+0x1e0>
	else if (!Button_2) button_input = 3;
 294:	81 99       	sbic	0x10, 1	; 16
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <set_data_ss+0x1d0>
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	80 93 68 00 	sts	0x0068, r24
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <set_data_ss+0x1e0>
	else if (!Button_2) button_input = 4;
 2a0:	81 99       	sbic	0x10, 1	; 16
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <set_data_ss+0x1dc>
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	80 93 68 00 	sts	0x0068, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <set_data_ss+0x1e0>
	else button_input = 0;
 2ac:	10 92 68 00 	sts	0x0068, r1
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	7f 90       	pop	r7
 2ca:	6f 90       	pop	r6
 2cc:	5f 90       	pop	r5
 2ce:	4f 90       	pop	r4
 2d0:	08 95       	ret

000002d2 <main>:

int main(void)
{
	int i=0,data=0;
	
	DDRA = 0xF0;
 2d2:	80 ef       	ldi	r24, 0xF0	; 240
 2d4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x0F;
 2d6:	8f e0       	ldi	r24, 0x0F	; 15
 2d8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x3F;
 2de:	8f e3       	ldi	r24, 0x3F	; 63
 2e0:	81 bb       	out	0x11, r24	; 17
#include <avr/io.h>
#include <util/delay.h>

void adc_init(unsigned char AD_PRSCL)
{
	ADCSRA=0x80 | AD_PRSCL;
 2e2:	85 e8       	ldi	r24, 0x85	; 133
 2e4:	86 b9       	out	0x06, r24	; 6
	else button_input = 0;
}

int main(void)
{
	int i=0,data=0;
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		if (i==10)
		{
			data = data +1;
			i=0;
 2ea:	e1 2c       	mov	r14, r1
 2ec:	f1 2c       	mov	r15, r1
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <main+0x22>
 2f0:	ce 2d       	mov	r28, r14
 2f2:	df 2d       	mov	r29, r15
		}
		PORTB |= (1<<0);
 2f4:	c0 9a       	sbi	0x18, 0	; 24
		set_data_ss(adc_value,Flse,2,True,4);
 2f6:	04 e0       	ldi	r16, 0x04	; 4
 2f8:	10 e0       	ldi	r17, 0x00	; 0
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	42 e0       	ldi	r20, 0x02	; 2
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	80 91 66 00 	lds	r24, 0x0066
 304:	90 91 67 00 	lds	r25, 0x0067
 308:	0e 94 68 00 	call	0xd0	; 0xd0 <set_data_ss>
		PORTB &= ~(1<<0);
 30c:	c0 98       	cbi	0x18, 0	; 24
		i++;
 30e:	21 96       	adiw	r28, 0x01	; 1
	
	adc_init(DF_32);
	
	while(1)
	{
		if (i==10)
 310:	ca 30       	cpi	r28, 0x0A	; 10
 312:	d1 05       	cpc	r29, r1
 314:	79 f7       	brne	.-34     	; 0x2f4 <main+0x22>
 316:	ec cf       	rjmp	.-40     	; 0x2f0 <main+0x1e>

00000318 <__subsf3>:
 318:	50 58       	subi	r21, 0x80	; 128

0000031a <__addsf3>:
 31a:	bb 27       	eor	r27, r27
 31c:	aa 27       	eor	r26, r26
 31e:	0e d0       	rcall	.+28     	; 0x33c <__addsf3x>
 320:	48 c1       	rjmp	.+656    	; 0x5b2 <__fp_round>
 322:	39 d1       	rcall	.+626    	; 0x596 <__fp_pscA>
 324:	30 f0       	brcs	.+12     	; 0x332 <__addsf3+0x18>
 326:	3e d1       	rcall	.+636    	; 0x5a4 <__fp_pscB>
 328:	20 f0       	brcs	.+8      	; 0x332 <__addsf3+0x18>
 32a:	31 f4       	brne	.+12     	; 0x338 <__addsf3+0x1e>
 32c:	9f 3f       	cpi	r25, 0xFF	; 255
 32e:	11 f4       	brne	.+4      	; 0x334 <__addsf3+0x1a>
 330:	1e f4       	brtc	.+6      	; 0x338 <__addsf3+0x1e>
 332:	2e c1       	rjmp	.+604    	; 0x590 <__fp_nan>
 334:	0e f4       	brtc	.+2      	; 0x338 <__addsf3+0x1e>
 336:	e0 95       	com	r30
 338:	e7 fb       	bst	r30, 7
 33a:	24 c1       	rjmp	.+584    	; 0x584 <__fp_inf>

0000033c <__addsf3x>:
 33c:	e9 2f       	mov	r30, r25
 33e:	4a d1       	rcall	.+660    	; 0x5d4 <__fp_split3>
 340:	80 f3       	brcs	.-32     	; 0x322 <__addsf3+0x8>
 342:	ba 17       	cp	r27, r26
 344:	62 07       	cpc	r22, r18
 346:	73 07       	cpc	r23, r19
 348:	84 07       	cpc	r24, r20
 34a:	95 07       	cpc	r25, r21
 34c:	18 f0       	brcs	.+6      	; 0x354 <__addsf3x+0x18>
 34e:	71 f4       	brne	.+28     	; 0x36c <__addsf3x+0x30>
 350:	9e f5       	brtc	.+102    	; 0x3b8 <__addsf3x+0x7c>
 352:	62 c1       	rjmp	.+708    	; 0x618 <__fp_zero>
 354:	0e f4       	brtc	.+2      	; 0x358 <__addsf3x+0x1c>
 356:	e0 95       	com	r30
 358:	0b 2e       	mov	r0, r27
 35a:	ba 2f       	mov	r27, r26
 35c:	a0 2d       	mov	r26, r0
 35e:	0b 01       	movw	r0, r22
 360:	b9 01       	movw	r22, r18
 362:	90 01       	movw	r18, r0
 364:	0c 01       	movw	r0, r24
 366:	ca 01       	movw	r24, r20
 368:	a0 01       	movw	r20, r0
 36a:	11 24       	eor	r1, r1
 36c:	ff 27       	eor	r31, r31
 36e:	59 1b       	sub	r21, r25
 370:	99 f0       	breq	.+38     	; 0x398 <__addsf3x+0x5c>
 372:	59 3f       	cpi	r21, 0xF9	; 249
 374:	50 f4       	brcc	.+20     	; 0x38a <__addsf3x+0x4e>
 376:	50 3e       	cpi	r21, 0xE0	; 224
 378:	68 f1       	brcs	.+90     	; 0x3d4 <__addsf3x+0x98>
 37a:	1a 16       	cp	r1, r26
 37c:	f0 40       	sbci	r31, 0x00	; 0
 37e:	a2 2f       	mov	r26, r18
 380:	23 2f       	mov	r18, r19
 382:	34 2f       	mov	r19, r20
 384:	44 27       	eor	r20, r20
 386:	58 5f       	subi	r21, 0xF8	; 248
 388:	f3 cf       	rjmp	.-26     	; 0x370 <__addsf3x+0x34>
 38a:	46 95       	lsr	r20
 38c:	37 95       	ror	r19
 38e:	27 95       	ror	r18
 390:	a7 95       	ror	r26
 392:	f0 40       	sbci	r31, 0x00	; 0
 394:	53 95       	inc	r21
 396:	c9 f7       	brne	.-14     	; 0x38a <__addsf3x+0x4e>
 398:	7e f4       	brtc	.+30     	; 0x3b8 <__addsf3x+0x7c>
 39a:	1f 16       	cp	r1, r31
 39c:	ba 0b       	sbc	r27, r26
 39e:	62 0b       	sbc	r22, r18
 3a0:	73 0b       	sbc	r23, r19
 3a2:	84 0b       	sbc	r24, r20
 3a4:	ba f0       	brmi	.+46     	; 0x3d4 <__addsf3x+0x98>
 3a6:	91 50       	subi	r25, 0x01	; 1
 3a8:	a1 f0       	breq	.+40     	; 0x3d2 <__addsf3x+0x96>
 3aa:	ff 0f       	add	r31, r31
 3ac:	bb 1f       	adc	r27, r27
 3ae:	66 1f       	adc	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	c2 f7       	brpl	.-16     	; 0x3a6 <__addsf3x+0x6a>
 3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <__addsf3x+0x98>
 3b8:	ba 0f       	add	r27, r26
 3ba:	62 1f       	adc	r22, r18
 3bc:	73 1f       	adc	r23, r19
 3be:	84 1f       	adc	r24, r20
 3c0:	48 f4       	brcc	.+18     	; 0x3d4 <__addsf3x+0x98>
 3c2:	87 95       	ror	r24
 3c4:	77 95       	ror	r23
 3c6:	67 95       	ror	r22
 3c8:	b7 95       	ror	r27
 3ca:	f7 95       	ror	r31
 3cc:	9e 3f       	cpi	r25, 0xFE	; 254
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__addsf3x+0x96>
 3d0:	b3 cf       	rjmp	.-154    	; 0x338 <__addsf3+0x1e>
 3d2:	93 95       	inc	r25
 3d4:	88 0f       	add	r24, r24
 3d6:	08 f0       	brcs	.+2      	; 0x3da <__addsf3x+0x9e>
 3d8:	99 27       	eor	r25, r25
 3da:	ee 0f       	add	r30, r30
 3dc:	97 95       	ror	r25
 3de:	87 95       	ror	r24
 3e0:	08 95       	ret

000003e2 <__divsf3>:
 3e2:	0c d0       	rcall	.+24     	; 0x3fc <__divsf3x>
 3e4:	e6 c0       	rjmp	.+460    	; 0x5b2 <__fp_round>
 3e6:	de d0       	rcall	.+444    	; 0x5a4 <__fp_pscB>
 3e8:	40 f0       	brcs	.+16     	; 0x3fa <__divsf3+0x18>
 3ea:	d5 d0       	rcall	.+426    	; 0x596 <__fp_pscA>
 3ec:	30 f0       	brcs	.+12     	; 0x3fa <__divsf3+0x18>
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <__divsf3+0x16>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	19 f0       	breq	.+6      	; 0x3fa <__divsf3+0x18>
 3f4:	c7 c0       	rjmp	.+398    	; 0x584 <__fp_inf>
 3f6:	51 11       	cpse	r21, r1
 3f8:	10 c1       	rjmp	.+544    	; 0x61a <__fp_szero>
 3fa:	ca c0       	rjmp	.+404    	; 0x590 <__fp_nan>

000003fc <__divsf3x>:
 3fc:	eb d0       	rcall	.+470    	; 0x5d4 <__fp_split3>
 3fe:	98 f3       	brcs	.-26     	; 0x3e6 <__divsf3+0x4>

00000400 <__divsf3_pse>:
 400:	99 23       	and	r25, r25
 402:	c9 f3       	breq	.-14     	; 0x3f6 <__divsf3+0x14>
 404:	55 23       	and	r21, r21
 406:	b1 f3       	breq	.-20     	; 0x3f4 <__divsf3+0x12>
 408:	95 1b       	sub	r25, r21
 40a:	55 0b       	sbc	r21, r21
 40c:	bb 27       	eor	r27, r27
 40e:	aa 27       	eor	r26, r26
 410:	62 17       	cp	r22, r18
 412:	73 07       	cpc	r23, r19
 414:	84 07       	cpc	r24, r20
 416:	38 f0       	brcs	.+14     	; 0x426 <__divsf3_pse+0x26>
 418:	9f 5f       	subi	r25, 0xFF	; 255
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	44 1f       	adc	r20, r20
 422:	aa 1f       	adc	r26, r26
 424:	a9 f3       	breq	.-22     	; 0x410 <__divsf3_pse+0x10>
 426:	33 d0       	rcall	.+102    	; 0x48e <__divsf3_pse+0x8e>
 428:	0e 2e       	mov	r0, r30
 42a:	3a f0       	brmi	.+14     	; 0x43a <__divsf3_pse+0x3a>
 42c:	e0 e8       	ldi	r30, 0x80	; 128
 42e:	30 d0       	rcall	.+96     	; 0x490 <__divsf3_pse+0x90>
 430:	91 50       	subi	r25, 0x01	; 1
 432:	50 40       	sbci	r21, 0x00	; 0
 434:	e6 95       	lsr	r30
 436:	00 1c       	adc	r0, r0
 438:	ca f7       	brpl	.-14     	; 0x42c <__divsf3_pse+0x2c>
 43a:	29 d0       	rcall	.+82     	; 0x48e <__divsf3_pse+0x8e>
 43c:	fe 2f       	mov	r31, r30
 43e:	27 d0       	rcall	.+78     	; 0x48e <__divsf3_pse+0x8e>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	bb 1f       	adc	r27, r27
 448:	26 17       	cp	r18, r22
 44a:	37 07       	cpc	r19, r23
 44c:	48 07       	cpc	r20, r24
 44e:	ab 07       	cpc	r26, r27
 450:	b0 e8       	ldi	r27, 0x80	; 128
 452:	09 f0       	breq	.+2      	; 0x456 <__divsf3_pse+0x56>
 454:	bb 0b       	sbc	r27, r27
 456:	80 2d       	mov	r24, r0
 458:	bf 01       	movw	r22, r30
 45a:	ff 27       	eor	r31, r31
 45c:	93 58       	subi	r25, 0x83	; 131
 45e:	5f 4f       	sbci	r21, 0xFF	; 255
 460:	2a f0       	brmi	.+10     	; 0x46c <__divsf3_pse+0x6c>
 462:	9e 3f       	cpi	r25, 0xFE	; 254
 464:	51 05       	cpc	r21, r1
 466:	68 f0       	brcs	.+26     	; 0x482 <__divsf3_pse+0x82>
 468:	8d c0       	rjmp	.+282    	; 0x584 <__fp_inf>
 46a:	d7 c0       	rjmp	.+430    	; 0x61a <__fp_szero>
 46c:	5f 3f       	cpi	r21, 0xFF	; 255
 46e:	ec f3       	brlt	.-6      	; 0x46a <__divsf3_pse+0x6a>
 470:	98 3e       	cpi	r25, 0xE8	; 232
 472:	dc f3       	brlt	.-10     	; 0x46a <__divsf3_pse+0x6a>
 474:	86 95       	lsr	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	9f 5f       	subi	r25, 0xFF	; 255
 480:	c9 f7       	brne	.-14     	; 0x474 <__divsf3_pse+0x74>
 482:	88 0f       	add	r24, r24
 484:	91 1d       	adc	r25, r1
 486:	96 95       	lsr	r25
 488:	87 95       	ror	r24
 48a:	97 f9       	bld	r25, 7
 48c:	08 95       	ret
 48e:	e1 e0       	ldi	r30, 0x01	; 1
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	88 1f       	adc	r24, r24
 496:	bb 1f       	adc	r27, r27
 498:	62 17       	cp	r22, r18
 49a:	73 07       	cpc	r23, r19
 49c:	84 07       	cpc	r24, r20
 49e:	ba 07       	cpc	r27, r26
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__divsf3_pse+0xaa>
 4a2:	62 1b       	sub	r22, r18
 4a4:	73 0b       	sbc	r23, r19
 4a6:	84 0b       	sbc	r24, r20
 4a8:	ba 0b       	sbc	r27, r26
 4aa:	ee 1f       	adc	r30, r30
 4ac:	88 f7       	brcc	.-30     	; 0x490 <__divsf3_pse+0x90>
 4ae:	e0 95       	com	r30
 4b0:	08 95       	ret

000004b2 <__fixunssfsi>:
 4b2:	98 d0       	rcall	.+304    	; 0x5e4 <__fp_splitA>
 4b4:	88 f0       	brcs	.+34     	; 0x4d8 <__fixunssfsi+0x26>
 4b6:	9f 57       	subi	r25, 0x7F	; 127
 4b8:	90 f0       	brcs	.+36     	; 0x4de <__fixunssfsi+0x2c>
 4ba:	b9 2f       	mov	r27, r25
 4bc:	99 27       	eor	r25, r25
 4be:	b7 51       	subi	r27, 0x17	; 23
 4c0:	a0 f0       	brcs	.+40     	; 0x4ea <__fixunssfsi+0x38>
 4c2:	d1 f0       	breq	.+52     	; 0x4f8 <__fixunssfsi+0x46>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	1a f0       	brmi	.+6      	; 0x4d4 <__fixunssfsi+0x22>
 4ce:	ba 95       	dec	r27
 4d0:	c9 f7       	brne	.-14     	; 0x4c4 <__fixunssfsi+0x12>
 4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <__fixunssfsi+0x46>
 4d4:	b1 30       	cpi	r27, 0x01	; 1
 4d6:	81 f0       	breq	.+32     	; 0x4f8 <__fixunssfsi+0x46>
 4d8:	9f d0       	rcall	.+318    	; 0x618 <__fp_zero>
 4da:	b1 e0       	ldi	r27, 0x01	; 1
 4dc:	08 95       	ret
 4de:	9c c0       	rjmp	.+312    	; 0x618 <__fp_zero>
 4e0:	67 2f       	mov	r22, r23
 4e2:	78 2f       	mov	r23, r24
 4e4:	88 27       	eor	r24, r24
 4e6:	b8 5f       	subi	r27, 0xF8	; 248
 4e8:	39 f0       	breq	.+14     	; 0x4f8 <__fixunssfsi+0x46>
 4ea:	b9 3f       	cpi	r27, 0xF9	; 249
 4ec:	cc f3       	brlt	.-14     	; 0x4e0 <__fixunssfsi+0x2e>
 4ee:	86 95       	lsr	r24
 4f0:	77 95       	ror	r23
 4f2:	67 95       	ror	r22
 4f4:	b3 95       	inc	r27
 4f6:	d9 f7       	brne	.-10     	; 0x4ee <__fixunssfsi+0x3c>
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__fixunssfsi+0x56>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	08 95       	ret

0000050a <__floatunsisf>:
 50a:	e8 94       	clt
 50c:	09 c0       	rjmp	.+18     	; 0x520 <__floatsisf+0x12>

0000050e <__floatsisf>:
 50e:	97 fb       	bst	r25, 7
 510:	3e f4       	brtc	.+14     	; 0x520 <__floatsisf+0x12>
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	99 23       	and	r25, r25
 522:	a9 f0       	breq	.+42     	; 0x54e <__floatsisf+0x40>
 524:	f9 2f       	mov	r31, r25
 526:	96 e9       	ldi	r25, 0x96	; 150
 528:	bb 27       	eor	r27, r27
 52a:	93 95       	inc	r25
 52c:	f6 95       	lsr	r31
 52e:	87 95       	ror	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b7 95       	ror	r27
 536:	f1 11       	cpse	r31, r1
 538:	f8 cf       	rjmp	.-16     	; 0x52a <__floatsisf+0x1c>
 53a:	fa f4       	brpl	.+62     	; 0x57a <__floatsisf+0x6c>
 53c:	bb 0f       	add	r27, r27
 53e:	11 f4       	brne	.+4      	; 0x544 <__floatsisf+0x36>
 540:	60 ff       	sbrs	r22, 0
 542:	1b c0       	rjmp	.+54     	; 0x57a <__floatsisf+0x6c>
 544:	6f 5f       	subi	r22, 0xFF	; 255
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	16 c0       	rjmp	.+44     	; 0x57a <__floatsisf+0x6c>
 54e:	88 23       	and	r24, r24
 550:	11 f0       	breq	.+4      	; 0x556 <__floatsisf+0x48>
 552:	96 e9       	ldi	r25, 0x96	; 150
 554:	11 c0       	rjmp	.+34     	; 0x578 <__floatsisf+0x6a>
 556:	77 23       	and	r23, r23
 558:	21 f0       	breq	.+8      	; 0x562 <__floatsisf+0x54>
 55a:	9e e8       	ldi	r25, 0x8E	; 142
 55c:	87 2f       	mov	r24, r23
 55e:	76 2f       	mov	r23, r22
 560:	05 c0       	rjmp	.+10     	; 0x56c <__floatsisf+0x5e>
 562:	66 23       	and	r22, r22
 564:	71 f0       	breq	.+28     	; 0x582 <__floatsisf+0x74>
 566:	96 e8       	ldi	r25, 0x86	; 134
 568:	86 2f       	mov	r24, r22
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	2a f0       	brmi	.+10     	; 0x57a <__floatsisf+0x6c>
 570:	9a 95       	dec	r25
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	da f7       	brpl	.-10     	; 0x570 <__floatsisf+0x62>
 57a:	88 0f       	add	r24, r24
 57c:	96 95       	lsr	r25
 57e:	87 95       	ror	r24
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__fp_inf>:
 584:	97 f9       	bld	r25, 7
 586:	9f 67       	ori	r25, 0x7F	; 127
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	08 95       	ret

00000590 <__fp_nan>:
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	08 95       	ret

00000596 <__fp_pscA>:
 596:	00 24       	eor	r0, r0
 598:	0a 94       	dec	r0
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	09 06       	cpc	r0, r25
 5a2:	08 95       	ret

000005a4 <__fp_pscB>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	12 16       	cp	r1, r18
 5aa:	13 06       	cpc	r1, r19
 5ac:	14 06       	cpc	r1, r20
 5ae:	05 06       	cpc	r0, r21
 5b0:	08 95       	ret

000005b2 <__fp_round>:
 5b2:	09 2e       	mov	r0, r25
 5b4:	03 94       	inc	r0
 5b6:	00 0c       	add	r0, r0
 5b8:	11 f4       	brne	.+4      	; 0x5be <__fp_round+0xc>
 5ba:	88 23       	and	r24, r24
 5bc:	52 f0       	brmi	.+20     	; 0x5d2 <__fp_round+0x20>
 5be:	bb 0f       	add	r27, r27
 5c0:	40 f4       	brcc	.+16     	; 0x5d2 <__fp_round+0x20>
 5c2:	bf 2b       	or	r27, r31
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__fp_round+0x18>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__fp_round+0x20>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__fp_split3>:
 5d4:	57 fd       	sbrc	r21, 7
 5d6:	90 58       	subi	r25, 0x80	; 128
 5d8:	44 0f       	add	r20, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <__fp_splitA+0x10>
 5de:	5f 3f       	cpi	r21, 0xFF	; 255
 5e0:	71 f0       	breq	.+28     	; 0x5fe <__fp_splitA+0x1a>
 5e2:	47 95       	ror	r20

000005e4 <__fp_splitA>:
 5e4:	88 0f       	add	r24, r24
 5e6:	97 fb       	bst	r25, 7
 5e8:	99 1f       	adc	r25, r25
 5ea:	61 f0       	breq	.+24     	; 0x604 <__fp_splitA+0x20>
 5ec:	9f 3f       	cpi	r25, 0xFF	; 255
 5ee:	79 f0       	breq	.+30     	; 0x60e <__fp_splitA+0x2a>
 5f0:	87 95       	ror	r24
 5f2:	08 95       	ret
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	14 06       	cpc	r1, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	f2 cf       	rjmp	.-28     	; 0x5e2 <__fp_split3+0xe>
 5fe:	46 95       	lsr	r20
 600:	f1 df       	rcall	.-30     	; 0x5e4 <__fp_splitA>
 602:	08 c0       	rjmp	.+16     	; 0x614 <__fp_splitA+0x30>
 604:	16 16       	cp	r1, r22
 606:	17 06       	cpc	r1, r23
 608:	18 06       	cpc	r1, r24
 60a:	99 1f       	adc	r25, r25
 60c:	f1 cf       	rjmp	.-30     	; 0x5f0 <__fp_splitA+0xc>
 60e:	86 95       	lsr	r24
 610:	71 05       	cpc	r23, r1
 612:	61 05       	cpc	r22, r1
 614:	08 94       	sec
 616:	08 95       	ret

00000618 <__fp_zero>:
 618:	e8 94       	clt

0000061a <__fp_szero>:
 61a:	bb 27       	eor	r27, r27
 61c:	66 27       	eor	r22, r22
 61e:	77 27       	eor	r23, r23
 620:	cb 01       	movw	r24, r22
 622:	97 f9       	bld	r25, 7
 624:	08 95       	ret

00000626 <__umulhisi3>:
 626:	a2 9f       	mul	r26, r18
 628:	b0 01       	movw	r22, r0
 62a:	b3 9f       	mul	r27, r19
 62c:	c0 01       	movw	r24, r0
 62e:	a3 9f       	mul	r26, r19
 630:	70 0d       	add	r23, r0
 632:	81 1d       	adc	r24, r1
 634:	11 24       	eor	r1, r1
 636:	91 1d       	adc	r25, r1
 638:	b2 9f       	mul	r27, r18
 63a:	70 0d       	add	r23, r0
 63c:	81 1d       	adc	r24, r1
 63e:	11 24       	eor	r1, r1
 640:	91 1d       	adc	r25, r1
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
